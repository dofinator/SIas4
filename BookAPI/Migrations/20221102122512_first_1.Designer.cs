// <auto-generated />
using System;
using BookAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookAPI.Migrations
{
    [DbContext(typeof(DbApplicationContext))]
    [Migration("20221102122512_first_1")]
    partial class first_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookAPI.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StudyProgrammeId")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "TestAuthor1",
                            IsAvailable = true,
                            Price = 200.0,
                            ReleaseDate = new DateTime(2022, 11, 2, 12, 25, 12, 500, DateTimeKind.Utc).AddTicks(147),
                            StudyProgrammeId = 1,
                            Subject = "System integration",
                            Title = "Enterprise integration patterns"
                        },
                        new
                        {
                            Id = 2,
                            Author = "TestAuthor2",
                            IsAvailable = true,
                            Price = 300.0,
                            ReleaseDate = new DateTime(2022, 11, 2, 12, 25, 12, 500, DateTimeKind.Utc).AddTicks(150),
                            StudyProgrammeId = 1,
                            Subject = "System integration",
                            Title = "Soa"
                        },
                        new
                        {
                            Id = 3,
                            Author = "TestAuthor3",
                            IsAvailable = true,
                            Price = 200.0,
                            ReleaseDate = new DateTime(2022, 11, 2, 12, 25, 12, 500, DateTimeKind.Utc).AddTicks(151),
                            StudyProgrammeId = 2,
                            Subject = "Development of large systems",
                            Title = "Guide to CI/CD"
                        },
                        new
                        {
                            Id = 4,
                            Author = "TestAuthor4",
                            IsAvailable = true,
                            Price = 350.0,
                            ReleaseDate = new DateTime(2022, 11, 2, 12, 25, 12, 500, DateTimeKind.Utc).AddTicks(152),
                            StudyProgrammeId = 2,
                            Subject = "Development of large systems",
                            Title = "Guide to Git flow"
                        },
                        new
                        {
                            Id = 5,
                            Author = "TestAuthor5",
                            IsAvailable = true,
                            Price = 150.0,
                            ReleaseDate = new DateTime(2022, 11, 2, 12, 25, 12, 500, DateTimeKind.Utc).AddTicks(153),
                            StudyProgrammeId = 3,
                            Subject = "Test",
                            Title = "Unit testing"
                        },
                        new
                        {
                            Id = 6,
                            Author = "TestAuthor6",
                            IsAvailable = true,
                            Price = 350.0,
                            ReleaseDate = new DateTime(2022, 11, 2, 12, 25, 12, 500, DateTimeKind.Utc).AddTicks(154),
                            StudyProgrammeId = 3,
                            Subject = "Test",
                            Title = "Integration testing"
                        });
                });

            modelBuilder.Entity("BookAPI.Models.BookStudentOrder", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.HasKey("StudentId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookStudentOrders");
                });

            modelBuilder.Entity("BookAPI.Models.BookStudentOrder", b =>
                {
                    b.HasOne("BookAPI.Models.Book", "Book")
                        .WithMany("BookStudentOrders")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookAPI.Models.Book", b =>
                {
                    b.Navigation("BookStudentOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
